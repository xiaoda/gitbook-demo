{"./":{"url":"./","title":"前端资料汇总","keywords":"","body":"前端资料汇总 使用步骤 使用 node v10 安装 gitbook-cli，gitbook-cli 无法与 node v12+ 兼容。推荐使用 nvm 安装并切换 node 版本。 nvm use 10 npm install gitbook-cli -g 安装 gitbook 插件 gitbook install 运行开发环境 gitbook serve 编译生产环境代码 gitbook build Copyright © anchnet.com 2022 all right reserved，powered by Gitbook文档更新时间： 2021-12-23 "},"blog/":{"url":"blog/","title":"博客","keywords":"","body":"博客列表 开发方式选择 调试风险的规避 Copyright © anchnet.com 2022 all right reserved，powered by Gitbook文档更新时间： 2021-12-22 "},"blog/develop-type.html":{"url":"blog/develop-type.html","title":"开发方式选择","keywords":"","body":"开发方式的选择，用插件还是自己撸？ 在我们接到日常的项目需求后，在真正开动前，大家有没有想过一个问题：这个需求/功能，我应该用插件还是自己撸？虽然在大部分时间和项目里，我们都以自主开发为主，但这并不妨碍我们在开动前可以认真地思考一下。 理论上，使用插件是比自己撸更快更高效的方式，因为插件一般是社区/团队/个人早先完成的同类模板，经过一定的模块化处理后，可以被第三方项目引入以满足项目需求。由于插件开发者和使用者往往不是同一个人/组织，所以插件文档或说明性文字就显得特别重要。有了清晰的插件文档，使用者才能理清插件功能以及接入方法。 一般来说，通用度比较高的功能需求（广义的功能）可以使用插件（广义的插件），例如：脚手架、UI 组件库、功能库如 HTTP 请求等。另一种情况是，项目需求本身对 UI 等各方面要求不高，可能是跟核心业务关系不大的一次性功能，这种情况下可以考虑为项目整体找一个现成的或者开源的插件，在此基础上进行数据对接或二次开发，这样可以用较小的代价完成较多的功能，插件不能满足的需求部分则用其它方法曲线实现，甚至向 PM 提出直接忽略。 除以上两种情况外的项目需求，理论上应尽量采用自主开发的方式。跟使用插件相比，自主开发需要更多的资源、更长的工期，但好处是能够完全实现项目/产品的功能需求，自定义程度高，并能在长期的开发过程中产生经验和积累，越做越好，甚至有通过项目提炼出产品的可能性。 最后总结，开发方式的选择不是一成不变的，我们可以对项目各方面情况进行全面评估后酌情选择。在这个过程中，希望大家尽可能多沟通，与 PM 沟通，与主管沟通，与其他开发同学沟通。多沟通不一定能让项目/产品有显著提升，但一定能避免意外的、不可控的情况出现。 Copyright © anchnet.com 2022 all right reserved，powered by Gitbook文档更新时间： 2021-12-22 "},"blog/debug-risk.html":{"url":"blog/debug-risk.html","title":"调试风险的规避","keywords":"","body":"调试风险的规避方法 有时为了方便项目测试，需要开发同学在测试环境甚至是生产环境改动特定代码。假设测试完成后开发同学及时将代码改回，则什么都不会发生；但假如忘记改回，那便会造成生产事故，如果涉及到钱就更加严重。即使我们相信自己可以及时改回，但建立在“记得”基础上的流程，也是不安全、不可靠、有风险的流程。 我的建议是：这类有风险的调试最好不要在代码里写死（硬编码），我们可以灵活运用编译脚本或环境变量，比如为特殊情况定制专门的编译脚本、设置专门的环境变量等，这样测试环境的调试就不会影响到生产环境。 此外，以前发生过手动编译打包用错命令、选错环境的事，其实也有一些预防办法，比如把环境变量、接口地址等输出到 index.html 方便在正式发布前由自己或别人做二次检查。 以上，请所有前端同学，特别是各项目前端组长注意，尽量从项目架构和流程上控制好前端部分的风险。如果有更好的规避前端风险、提升可靠性的办法，欢迎在项目中使用或分享给大家！ Copyright © anchnet.com 2022 all right reserved，powered by Gitbook文档更新时间： 2021-12-22 "},"share/":{"url":"share/","title":"技术分享","keywords":"","body":"技术分享列表 前端基础培训 Copyright © anchnet.com 2022 all right reserved，powered by Gitbook文档更新时间： 2021-12-22 "},"share/base.html":{"url":"share/base.html","title":"前端基础培训","keywords":"","body":"前端基础培训材料 【1】Git 基础命令【备用链接】 git clone 克隆仓库 git pull / git fetch 拉取代码 git diff / git diff --staged 查看代码修改 git add . / git add xxx 添加到暂存区 git status 查看当前状态 git commit -m '解决 xxx 问题' 提交代码 git push 推送代码 分支使用 git checkout xxx / git checkout -b xxx 切换分支 git merge xxx 合并分支 git rebase xxx 另一种合并分支的方式：Reapply commits on top of another base tip git branch -d xxx 删除分支 解决冲突 经过沟通保留双方需要的代码片段 代码回滚【备用链接】 git reset xxx / git reset --hard xxx 回滚到之前的某个版本 git revert xxx 撤销某一次提交 其它常用命令 git config / git config --global 查看或修改 git 配置信息 git branch / git branch -r 查看或创建分支 git log 查看提交日志 git tag 查看或创建标签 git stash 暂存代码 git blame 查看文件修改记录 .gitignore gitignore 的作用是帮助我们在执行 git add 时将我们指定的一些文件自动排除在外，不提交到 Git 当中。 node_modules /build /dist /.idea /.vscode .DS_Store 注意事项 尽量使用命令行而不是各类工具操作 Git Git 操作出现问题或意料之外的情况时，停止操作、保留命令行并及时向组长/主管求助。 git push -f 强制推送很危险，绝大部分时候不允许使用。 在进行有风险、没有把握的操作时，先对分支进行备份。 疑难问题 改变文件名字母大小写时，Git 为什么不记录，我该怎么办？ Mac / Windows 操作系统默认对字母大小写不敏感，因此 Git 无法识别到文件名的变化。使用临时名称、改两次名字并提交可以解决。 提交被误删了怎么办？ git reflog / git cherry-pick 搭配使用可以找回。 参考资料 git 使用简易指南 【2】前端项目注意事项 项目依赖 package.json 每个项目的根目录下面，一般都有一个 package.json 文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install 命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。 { \"dependencies\": { \"vue\": \"2.6.14\", \"react\": \"~17.0.2\" \"angular\": \"^13.0.1\" }, \"devDependencies\": {}, \"scripts\": { \"start\": \"...\", \"dev\": \"...\", \"watch\": \"...\", \"test\": \"...\", \"build\": \"...\", \"build:prod\": \"...\" } } package-lock.json / yarn.lock 该文件旨在跟踪被安装的每个软件包的确切版本，以便产品可以以相同的方式被 100％ 复制（即使软件包的维护者更新了软件包）。package-lock.json 会固化当前安装的每个软件包的版本，当运行 npm install 时，npm 会使用这些确切的版本。package-lock.json 文件需要被提交到 Git 仓库，以便被其他人获取（如果项目是公开的或有合作者，或者将 Git 作为部署源）。 代码格式化【备用链接】 关闭编辑器的代码格式化功能！ ESLint【ESLint 规则】 JS 语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。 规则 Standard Airbnb Google 要求 不允许将带有 ESLint 报错的代码提交到远程 .editorconfig 帮助开发人员在不同的编辑器和 IDE 之间定义和维护一致的编码样式。 root = true [*] indent_style = space indent_size = 2 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true 其它 Prettier Stylelint commitlint 环境变量 接口地址等变量不可以硬编码在项目中，建议使用环境变量作区分。 调试数据尽量使用环境变量定义以确保调试被限制在特定环境里 console.log 临时调试，用完删除。 可用于重要模块的日志打印 【3】前端开发实用工具 Chrome DevTools iOS Simulator: Mac 平台 Xcode 自带 iPhone / iPad 仿真模拟器。 微信开发者工具：主要用于开发微信小程序，也可用于开发和调试公众号网页。 Postman / Apifox: API 接口模拟请求工具 Fiddler / Charles: 网络抓包、手机网络代理等功能 【4】前端代码最佳实践 JS if 条件判断 if (a === true) { doSomething() } // 类似的 const b = condition ? true : false 建议 if (a) { doSomething() } const b = Boolean(condition) const b = !!condition if 条件判断 2 if (a == 1) { doThis() } else if (a == 2) { doThat() } else if (a == 3) { doWhatever() } else { doNothing() } 建议 switch (a) { case 1: doThis() break case 2: doThat() break case 3: doWhatever() break default: doNothing() } if 条件判断 3 let a if (condition) { a = 1 } else { a = 2 } 建议 const a = condition ? 1 : 2 if 条件判断 4 if (!a) { if (b) { if (!c) { doThis() } else { doThat() } } else { doWhatever() } } else { doNothing() } 建议 if (a) { doNothing() } else { if (b) { if (c) { doThat() } else { doThis() } } else { doWhatever() } } indexOf const stringContainX = a.indexOf('x') const arrayContainX = b.indexOf('y') 建议 const stringContainX = a.includes('x') const stringContainX = a.startsWith('x') const stringContainX = a.endsWith('x') const arrayContainX = b.includes('y') 数组方法的选择 const a = array.forEach(...) array.map(...) 建议 array.forEach(...) const b = array.map(...) 删除数组元素 array.forEach((item, index) => { if (index % 2 === 0) { array.splice(index, 1) } }) 复杂类型的引用传值 const a = {x: 1} const b = a b.x = 2 console.log(a.x) 建议 // 深度克隆 const b = JSON.parse(JSON.stringify(a)) 运行时报错：对象为空 Can not read property x of undefined const b = a.x 建议 const b = a ? a.x : null // or const b = a?.x React React Hook【备用链接】 React关于shouldComponentUpdate、PureComponent和React.memo Vue vue之keep-alive的应用 综合 组件、代码复用 能复用尽量复用，避免重复造轮子 可以复用的模块、组件、方法等尽量提取出来 公共代码是可以修改的，但要谨慎考虑各种情况。 数据和模板分离 多个相同或类似的 HTML 结构尽量使用数据循环输出模板内容 问题解决 遇到问题先自行思考或搜索 比报错更重要的是具体的错误信息 一段时间内无法解决的问题及时向组长/主管求助 不要用猥琐的方式（奇巧淫技）解决问题 代码可读性 代码可读性在某种程度上比代码运行效率更重要，为了可读性降低一点效率是可以接受的。 对代码进行必要的注释，特别是核心模块、公共组件、通用方法、重要参数等。 参考资料 内部基础规范 编码规范 by @mdo ES6 入门教程 by 阮一峰 Javascript 秘密花园 【5】前后端联调 前后端联调问题点 后端 API 问题认定方法【备用链接】 【6】前端进阶课题 经典问题 浏览器从输入 URL 到页面加载发生了什么？ 技术分享 前端技术分享：Canvas 【分享材料】【分享视频】 Jenkins + Git + Nginx 自动化部署前端项目【分享材料】 前端技术分享：Electron 客户端【分享材料】【分享视频】 前端微服务及框架 qiankun 技术分享【分享材料】【分享视频】 Copyright © anchnet.com 2022 all right reserved，powered by Gitbook文档更新时间： 2021-12-22 "}}